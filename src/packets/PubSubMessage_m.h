//
// Generated file, do not edit! Created by opp_msgtool 6.1 from packets/PubSubMessage.msg.
//

#ifndef __PUBSUBMESSAGE_M_H
#define __PUBSUBMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class PubSubMessage;
#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

/**
 * Enum generated from <tt>packets/PubSubMessage.msg:3</tt> by opp_msgtool.
 * <pre>
 * enum PubSubMessageType
 * {
 *     Subscription = 0;
 *     Publication = 1;
 * }
 * </pre>
 */
enum PubSubMessageType {
    Subscription = 0,
    Publication = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PubSubMessageType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PubSubMessageType& e) { int n; b->unpack(n); e = static_cast<PubSubMessageType>(n); }

/**
 * Class generated from <tt>packets/PubSubMessage.msg:7</tt> by opp_msgtool.
 * <pre>
 * class PubSubMessage extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(6);
 *     uint8_t hopCount = 0;
 *     uint32_t nonce;
 *     PubSubMessageType type;
 *     string topic;
 *     string nodeName;
 * }
 * </pre>
 */
class PubSubMessage : public ::inet::FieldsChunk
{
  protected:
    uint8_t hopCount = 0;
    uint32_t nonce = 0;
    PubSubMessageType type = static_cast<PubSubMessageType>(-1);
    omnetpp::opp_string topic;
    omnetpp::opp_string nodeName;

  private:
    void copy(const PubSubMessage& other);

  protected:
    bool operator==(const PubSubMessage&) = delete;

  public:
    PubSubMessage();
    PubSubMessage(const PubSubMessage& other);
    virtual ~PubSubMessage();
    PubSubMessage& operator=(const PubSubMessage& other);
    virtual PubSubMessage *dup() const override {return new PubSubMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getHopCount() const;
    virtual void setHopCount(uint8_t hopCount);

    virtual uint32_t getNonce() const;
    virtual void setNonce(uint32_t nonce);

    virtual PubSubMessageType getType() const;
    virtual void setType(PubSubMessageType type);

    virtual const char * getTopic() const;
    virtual void setTopic(const char * topic);

    virtual const char * getNodeName() const;
    virtual void setNodeName(const char * nodeName);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PubSubMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PubSubMessage& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline PubSubMessage *fromAnyPtr(any_ptr ptr) { return check_and_cast<PubSubMessage*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __PUBSUBMESSAGE_M_H

